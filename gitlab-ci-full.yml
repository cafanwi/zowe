terraform image: node:16-alpine

variables:
  # Enable to get log messages from SAST jobs
  # SECURE_LOG_LEVEL: debug
  SAST_SEMGREP_METRICS: 'false'

# Cache modules in between jobs
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/
    - node_modules

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

stages:
  - install
  - lint
  - test
  - build
  - publish_registry
  - deploy_staging
  - deploy_demo
  - release
  - after_failure

.npm-install: &npm-install
  - node --version
  - npm --version
  - npm ci --cache .npm --prefer-offline

.ui-lint:
  stage: lint

# This downloads 673MB of stuff as of 2021/12/2, and often takes many minutes multiplied by every lint job.
# So in order to speed up the process, download it once from the internet and save it in the cache in the first stage.
ui-install:
  stage: install
  script:
    - *npm-install

tsc:
  extends: .ui-lint
  script:
    - npm run tsc

eslint:
  extends: .ui-lint
  script:
    - npm run lint -- --max-warnings 0

prettier:
  extends: .ui-lint
  script:
    - npm run prettier

test:
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  script:
    - CI=true npm run test:coverage
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage/cobertura-coverage.xml
      - $CI_PROJECT_DIR/junit.xml
      - $CI_PROJECT_DIR/coverage/lcov.info
    reports:
      cobertura: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml
      junit: $CI_PROJECT_DIR/junit.xml
    expire_in: 1 month

build:
  stage: build
  script:
    # Do not treat build warnings as errors
    - CI=false npm run build
  artifacts:
    paths:
      - build/
    expire_in: 8 hours

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - project: 'PiHealth/CoreFICS/fics-cicd-templates'
    ref: 'main'
    file:
      - templates/ssh_setup.yml
      - templates/update_docker_container.yml
      - templates/publish_image_registry.yml

# We don't want to scan node_modules for vulnerabilities, so don't bring the cache to these jobs
nodejs-scan-sast:
  cache: {}

semgrep-sast:
  cache: {}

eslint-sast:
  cache: {}

publish_image:
  extends: .publish_latest_image_registry
  variables:
    ARG_DIRECTORY: .
    ARG_IMAGE: fics-ui
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build
      artifacts: true

deploy_staging:
  extends: .update_staging_docker_container
  variables:
    ARG_COMPOSE_FILE: /opt/fics/ui-docker-compose.yml
    ARG_CONTAINER: fics-ui
  dependencies: []
  needs:
    - 'publish_image'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy_demo:
  extends: .update_demo_docker_container
  variables:
    ARG_COMPOSE_FILE: /opt/fics/ui-docker-compose.yml
    ARG_CONTAINER: fics-ui
  dependencies: []
  needs:
    - 'publish_image'
    - 'deploy_staging'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release_container_registry:
  extends: .publish_release_image_registry
  variables:
    ARG_DIRECTORY: .
    ARG_IMAGE: fics-ui
  before_script:
    - export ARG_VERSION="$(awk -F'"' '/"version":\ ".+"/{ print $4; exit; }' $CI_PROJECT_DIR/package.json)"
  needs:
    - job: build
      artifacts: true

# For the event in which a failure occurs after the UI was stopped
respin_ui:
  stage: after_failure
  extends: .ssh_setup
  script:
    - ssh ${FICS_STAGING_SSH_USER}@${FICS_STAGING_IP} 'docker-compose -f /opt/fics/ui-docker-compose.yml start fics-ui || echo "fics-ui container does not exist"'
    - ssh ${FICS_DEMO_SSH_USER}@${FICS_DEMO_IP} 'docker-compose -f /opt/fics/ui-docker-compose.yml start fics-ui || echo "fics-ui container does not exist"'
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_failure
      allow_failure: true
